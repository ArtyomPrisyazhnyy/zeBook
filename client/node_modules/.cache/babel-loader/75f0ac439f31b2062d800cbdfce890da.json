{"ast":null,"code":"import axios from \"axios\";\nimport { fetchProducts, fetchWriters } from \"../../http/productsAPI\";\nexport const fetchProductsAction = (selectedWriter, selectedGenre, page, limit, searchingProduct) => dispatch => {\n  fetchProducts(selectedWriter.id, selectedGenre.id, page, limit, searchingProduct).then(data => {\n    dispatch(setProducts(data.rows));\n    dispatch(setTotalCount(data.rows));\n  });\n};\nexport const fetchWriterAction = () => dispatch => {\n  fetchWriters().then(data => {\n    dispatch(setWriter(data));\n  });\n};\nexport const fetchWriterGenres = () => dispatch => {\n  fetchGenres().then(data => {\n    dispatch(setGenre(data));\n  });\n};\nexport const setGenre = genre => ({\n  type: \"SET_GENRE\",\n  genre\n});\nexport const setWriter = writer => ({\n  type: \"SET_WRITER\",\n  writer\n});\nexport const setProducts = products => ({\n  type: \"SET_PRODUCTS\",\n  products\n});\nexport const setBaskets = baskets => ({\n  type: \"SET_BASKETS\",\n  baskets\n});\nexport const setSelectedGenre = selectedGenre => ({\n  type: \"SET_SELECTED_GENRE\",\n  selectedGenre\n});\nexport const setSelectedWriter = selectedWriter => ({\n  type: \"SET_SELECTED_WRITER\",\n  selectedWriter\n});\nexport const setPage = page => ({\n  type: \"SET_PAGE\",\n  page\n});\nexport const setTotalCount = totalCount => ({\n  type: \"SET_TOTAL\",\n  totalCount\n});\nexport const setSearchingProduct = searchingProduct => ({\n  type: \"SET_SEARCHING_PRODUCT\",\n  searchingProduct\n});","map":{"version":3,"sources":["D:/bookStore/client/src/redux/actions/products.js"],"names":["axios","fetchProducts","fetchWriters","fetchProductsAction","selectedWriter","selectedGenre","page","limit","searchingProduct","dispatch","id","then","data","setProducts","rows","setTotalCount","fetchWriterAction","setWriter","fetchWriterGenres","fetchGenres","setGenre","genre","type","writer","products","setBaskets","baskets","setSelectedGenre","setSelectedWriter","setPage","totalCount","setSearchingProduct"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,YAAxB,QAA4C,wBAA5C;AAEA,OAAO,MAAMC,mBAAmB,GAAG,CAACC,cAAD,EAAiBC,aAAjB,EAAgCC,IAAhC,EAAsCC,KAAtC,EAA6CC,gBAA7C,KAAmEC,QAAD,IAAc;AAC/GR,EAAAA,aAAa,CAACG,cAAc,CAACM,EAAhB,EAAoBL,aAAa,CAACK,EAAlC,EAAsCJ,IAAtC,EAA4CC,KAA5C,EAAmDC,gBAAnD,CAAb,CACKG,IADL,CACUC,IAAI,IAAI;AACVH,IAAAA,QAAQ,CAACI,WAAW,CAACD,IAAI,CAACE,IAAN,CAAZ,CAAR;AACAL,IAAAA,QAAQ,CAACM,aAAa,CAACH,IAAI,CAACE,IAAN,CAAd,CAAR;AACH,GAJL;AAKH,CANM;AAQP,OAAO,MAAME,iBAAiB,GAAG,MAAOP,QAAD,IAAc;AACjDP,EAAAA,YAAY,GAAGS,IAAf,CAAoBC,IAAI,IAAI;AACxBH,IAAAA,QAAQ,CAACQ,SAAS,CAACL,IAAD,CAAV,CAAR;AACH,GAFD;AAGH,CAJM;AAKP,OAAO,MAAMM,iBAAiB,GAAG,MAAOT,QAAD,IAAc;AACjDU,EAAAA,WAAW,GAAGR,IAAd,CAAmBC,IAAI,IAAI;AACvBH,IAAAA,QAAQ,CAACW,QAAQ,CAACR,IAAD,CAAT,CAAR;AACH,GAFD;AAGH,CAJM;AAMP,OAAO,MAAMQ,QAAQ,GAAIC,KAAD,KAAY;AAChCC,EAAAA,IAAI,EAAE,WAD0B;AAEhCD,EAAAA;AAFgC,CAAZ,CAAjB;AAKP,OAAO,MAAMJ,SAAS,GAAIM,MAAD,KAAa;AAClCD,EAAAA,IAAI,EAAE,YAD4B;AAElCC,EAAAA;AAFkC,CAAb,CAAlB;AAKP,OAAO,MAAMV,WAAW,GAAIW,QAAD,KAAe;AACtCF,EAAAA,IAAI,EAAE,cADgC;AAEtCE,EAAAA;AAFsC,CAAf,CAApB;AAKP,OAAO,MAAMC,UAAU,GAAIC,OAAD,KAAc;AACpCJ,EAAAA,IAAI,EAAE,aAD8B;AAEpCI,EAAAA;AAFoC,CAAd,CAAnB;AAKP,OAAO,MAAMC,gBAAgB,GAAItB,aAAD,KAAoB;AAChDiB,EAAAA,IAAI,EAAE,oBAD0C;AAEhDjB,EAAAA;AAFgD,CAApB,CAAzB;AAKP,OAAO,MAAMuB,iBAAiB,GAAIxB,cAAD,KAAqB;AAClDkB,EAAAA,IAAI,EAAE,qBAD4C;AAElDlB,EAAAA;AAFkD,CAArB,CAA1B;AAKP,OAAO,MAAMyB,OAAO,GAAIvB,IAAD,KAAW;AAC9BgB,EAAAA,IAAI,EAAE,UADwB;AAE9BhB,EAAAA;AAF8B,CAAX,CAAhB;AAKP,OAAO,MAAMS,aAAa,GAAIe,UAAD,KAAiB;AAC1CR,EAAAA,IAAI,EAAE,WADoC;AAE1CQ,EAAAA;AAF0C,CAAjB,CAAtB;AAKP,OAAO,MAAMC,mBAAmB,GAAIvB,gBAAD,KAAuB;AACtDc,EAAAA,IAAI,EAAE,uBADgD;AAEtDd,EAAAA;AAFsD,CAAvB,CAA5B","sourcesContent":["import axios from \"axios\";\r\nimport { fetchProducts, fetchWriters } from \"../../http/productsAPI\";\r\n\r\nexport const fetchProductsAction = (selectedWriter, selectedGenre, page, limit, searchingProduct) => (dispatch) => {\r\n    fetchProducts(selectedWriter.id, selectedGenre.id, page, limit, searchingProduct)\r\n        .then(data => {\r\n            dispatch(setProducts(data.rows));\r\n            dispatch(setTotalCount(data.rows));\r\n        })\r\n}\r\n\r\nexport const fetchWriterAction = () => (dispatch) => {\r\n    fetchWriters().then(data => {\r\n        dispatch(setWriter(data))\r\n    })\r\n}\r\nexport const fetchWriterGenres = () => (dispatch) => {\r\n    fetchGenres().then(data => {\r\n        dispatch(setGenre(data))\r\n    })\r\n}\r\n\r\nexport const setGenre = (genre) => ({\r\n    type: \"SET_GENRE\",\r\n    genre,\r\n})\r\n\r\nexport const setWriter = (writer) => ({\r\n    type: \"SET_WRITER\",\r\n    writer,\r\n})\r\n\r\nexport const setProducts = (products) => ({\r\n    type: \"SET_PRODUCTS\",\r\n    products,\r\n})\r\n\r\nexport const setBaskets = (baskets) => ({\r\n    type: \"SET_BASKETS\",\r\n    baskets,\r\n})\r\n\r\nexport const setSelectedGenre = (selectedGenre) => ({\r\n    type: \"SET_SELECTED_GENRE\",\r\n    selectedGenre,\r\n})\r\n\r\nexport const setSelectedWriter = (selectedWriter) => ({\r\n    type: \"SET_SELECTED_WRITER\",\r\n    selectedWriter,\r\n})\r\n\r\nexport const setPage = (page) => ({\r\n    type: \"SET_PAGE\",\r\n    page,\r\n})\r\n\r\nexport const setTotalCount = (totalCount) => ({\r\n    type: \"SET_TOTAL\",\r\n    totalCount,\r\n})\r\n\r\nexport const setSearchingProduct = (searchingProduct) => ({\r\n    type: \"SET_SEARCHING_PRODUCT\",\r\n    searchingProduct,\r\n})"]},"metadata":{},"sourceType":"module"}